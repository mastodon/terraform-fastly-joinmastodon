locals {
  name = var.name != "" ? var.name : var.hostname

  hostname_parts   = split(".", var.hostname)
  backend_name     = var.backend_name != "" ? var.backend_name : "${var.hostname} - backend"
  ssl_hostname     = var.ssl_hostname != "" ? var.ssl_hostname : var.hostname
  healthcheck_host = var.healthcheck_host != "" ? var.healthcheck_host : var.hostname
  healthcheck_name = var.healthcheck_name != "" ? var.healthcheck_name : "${var.hostname} - healthcheck"

  vcl_apex_error            = templatefile("${path.module}/vcl/apex_error.vcl", { hostname = var.hostname })
  vcl_apex_redirect         = templatefile("${path.module}/vcl/apex_redirect.vcl", { hostname = "${var.hostname}" })

  datadog_format         = replace(file("${path.root}/logging/datadog.json"), "__service__", var.datadog_service)
}

resource "fastly_service_vcl" "app_service" {
  name = local.name

  default_ttl    = var.default_ttl
  http3          = true
  stale_if_error = true

  # Need both default and www domains
  domain {
    name = var.hostname
  }
  domain {
    name    = "www.${var.hostname}"
    comment = "Will be redirected to the APEX domain"
  }

  # If the domain is not a .com, make sure we add redirects for .com
  dynamic "domain" {
    for_each = substr(var.hostname, -4, 0) != ".com" ? ["${local.hostname_parts[0]}.com", "www.${local.hostname_parts[0]}.com"] : []
    content {
      name    = domain.value
      comment = "Will be redirected to the APEX domain"
    }
  }

  # Backend
  backend {
    name    = local.backend_name
    address = var.backend_address

    auto_loadbalance  = false
    healthcheck       = local.healthcheck_name
    keepalive_time    = 0
    override_host     = var.ssl_hostname
    port              = var.backend_port
    max_conn          = 200
    shield            = var.shield_region
    ssl_cert_hostname = local.ssl_hostname
    ssl_sni_hostname  = local.ssl_hostname
    use_ssl           = true
  }

  # Healthcheck
  healthcheck {
    name = local.healthcheck_name
    host = local.healthcheck_host
    path = var.healthcheck_path

    check_interval    = 60000
    expected_response = var.healthcheck_expected_response
    initial           = 1
    method            = var.healthcheck_method
    threshold         = 1
    timeout           = 5000
    window            = 2
  }

  # Datadog logging
  dynamic "logging_datadog" {
    for_each = var.datadog ? [1] : []
    content {
      name   = "Datadog ${var.datadog_region}"
      format = local.datadog_format
      token  = var.datadog_token

      region = var.datadog_region
    }
  }

  # Force TLS/HSTS settings
  # Creates similar objects to what the GUI switch creates.

  dynamic "request_setting" {
    for_each = var.force_tls_hsts ? [1] : []
    content {
      name = "Generated by force TLS and enable HSTS"

      bypass_busy_wait = false
      force_miss       = false
      force_ssl        = true
      max_stale_age    = 0
      timer_support    = false
      xff              = ""
    }
  }

  dynamic "header" {
    for_each = var.force_tls_hsts ? [1] : []
    content {
      action      = "set"
      destination = "http.Strict-Transport-Security"
      name        = "Generated by force TLS and enable HSTS"
      type        = "response"

      ignore_if_set = false
      priority      = 100
      source        = "\"max-age=${var.hsts_duration}; includeSubDomains; preload\""
    }
  }

  # gzip default policy
  dynamic "gzip" {
    for_each = var.gzip_default_policy ? [1] : []
    content {
      content_types = [
        "text/html",
        "application/x-javascript",
        "text/css",
        "application/javascript",
        "text/javascript",
        "application/json",
        "application/vnd.ms-fontobject",
        "application/x-font-opentype",
        "application/x-font-truetype",
        "application/x-font-ttf",
        "application/xml",
        "font/eot",
        "font/opentype",
        "font/otf",
        "image/svg+xml",
        "image/vnd.microsoft.icon",
        "text/plain",
        "text/xml",
      ]
      extensions    = [
        "css",
        "js",
        "html",
        "eot",
        "ico",
        "otf",
        "ttf",
        "json",
        "svg",
      ]
      name          = "Generated by default compression policy"
    }
  }

  # Custom VCL snippets

  snippet {
    name     = "Redirect to APEX - error"
    content  = local.vcl_apex_error
    type     = "error"
    priority = 100
  }

  snippet {
    content  = local.vcl_apex_redirect
    name     = "Redirect www to Apex - recv"
    priority = 100
    type     = "recv"
  }

  # Additional products
  product_enablement {
    brotli_compression = var.product_enablement.brotli_compression
    domain_inspector   = var.product_enablement.domain_inspector
    image_optimizer    = var.product_enablement.image_optimizer
    origin_inspector   = var.product_enablement.origin_inspector
    websockets         = var.product_enablement.websockets
  }
}
